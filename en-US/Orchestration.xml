<?xml version='1.0' encoding='utf-8' ?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
<!ENTITY % BOOK_ENTITIES SYSTEM "Users_Guide.ent">
%BOOK_ENTITIES;
]>
<chapter id="Orchestration">
<title>Orchestration</title>

<para>
The CloudVeneto cloud provides an orchestration service, implemented through
the OpenStack Heat component, that allows you to spin up multiple instances, 
and other cloud services in an automated fashion.
</para>

<para>
In Heat parlance, a <literal>stack</literal> is the collection of 
objects, or <literal>resources</literal>, that will be created by Heat. 
This might include instances (VMs), networks, subnets, routers, ports,
security groups, security group rules, etc.
</para>


<para>
Heat uses the idea of a <literal>template</literal> to define a 
stack. If you want to have a stack that creates two instances connected by 
a private network, then your template would contain the definitions for two 
instances, a network, a subnet, and two network ports.
</para>

<para>
Either native <literal>HOT</literal> templates, and 
<literal>AWS CloudFormation</literal> (CFN) templates are 
supported.
Templates in <literal>HOT</literal> (Heat Orchestration Template) format are 
typically, but not necessarily required to be, expressed as <ulink url="http://yaml.org">YAML</ulink>
while CFN (AWS CloudFormation) formatted templates are instead typically expressed 
in <ulink url="http://json.org">JSON</ulink>. 
</para>


<section id="CreatingATemplate">
<title>Creating a template</title>


<para>
This is a working example of a HOT template which:
</para>

<para>

<itemizedlist>
   <listitem><para>
   Creates a virtual machine connected to a project network;
   </para></listitem>

   <listitem><para>
   Creates a storage volume;
   </para></listitem>

   <listitem><para>
   Attaches this volume to the previously created VM;
   </para></listitem>
</itemizedlist>
</para>

<screen>
heat_template_version: 2015-04-30

description: Template which creates a VM and a cinder volume; volume is then attached to this VM

parameters:
  instance_name:
    type: string
    description: VM Name
    constraints:
    - allowed_pattern: "[a-zA-Z0-9-]+"

resources:

  my_volume:
    type: OS::Cinder::Volume
    properties:
      name: "testVolume"
      size: 3

  my_instance:
    type: OS::Nova::Server
    properties:
      name: { get_param: instance_name }
      image: Centos7x86_64
      flavor: cloudveneto.small
      security_groups: [default]
      key_name: paolomazzon
      admin_pass: heattest
      networks: [{"network": testing-lan}]

  my_volume_attachment:
    type: OS::Cinder::VolumeAttachment
    properties:
      volume_id: { get_resource: my_volume }
      instance_uuid: { get_resource: my_instance }

outputs:
  instance_fixed_ip:
    description: fixed ip assigned to the server
    value: { get_attr: [my_instance, first_address] }

</screen>



<para>
Templates have three sections:
</para>


<screen>
# This is required.
heat_template_version: 2015-04-30

parameters:
  # parameters go here

resources:
  # resources go here (this section is required)

outputs:
  # outputs go here
</screen>

<para>
The resources section specifies what resources Heat should create:
</para>

<screen>
resources:
  my_resource_id:
    type: a_resource_type
    properties:
      property1: ...
      property2: ...
</screen>

<para>
Hardcoded values can be replaced with parameters. The actual value to be used 
is then specified when the stack is created. In our example a parameter is 
used for the name of the VM to be created:
</para>


<screen>
parameters:
  instance_name:
    type: string
    description: VM Name
    constraints:
    - allowed_pattern: "[a-zA-Z0-9-]+"
</screen>

<para>
A full description of all the resources that can be used in the stack creation
can be found accessing the <menuchoice><guimenu>Orchestration</guimenu><guisubmenu>Resource Types</guisubmenu></menuchoice>
menu.
</para>

<para>
Sometimes we want to extract information about a stack. In our example the 
output is the fixed IP of the VM created by the stack:
</para>

<screen>
outputs:
  server_ip:
    description: fixed ip assigned to the server
    value: { get_attr: [my_instance, first_address]:
</screen>


<para>
Heat templates allows also to insert user data via cloud-init, e.g:
</para>

<screen>
server01:
    type: OS::Nova::Server
    properties:
      image: sl66
      flavor: cldareapd.xsmall
      user_data_format: RAW
      user_data:
        str_replace:
          template: |
            #!/bin/sh
            yum install -y httpd
            service httpd start
            iptables -I INPUT 4 -m state --state NEW -p tcp --dport 80 -j ACCEPT
            service iptables save
            service iptables restart
</screen>

<para>
Resource startup order can be managed in Heat, as explained in
<ulink url="https://blog.zhaw.ch/icclab/manage-instance-startup-order-in-openstack-heat-templates/">this page</ulink>. For example it is possible to create a VM only when 
another one has been successfully started.
</para>


<para>
The Heat Orchestration Template (HOT) specification is available 
<ulink url="http://docs.openstack.org/developer/heat/template_guide/hot_spec.html">here</ulink>.
</para>

</section>

<section id="CreatingAStack">
<title>Creating a stack</title>

<para>
To create a stack using the browser please select the 
<menuchoice><guimenu>Orchestration</guimenu><guisubmenu>Stacks</guisubmenu></menuchoice> left menu.
From here select <menuchoice><guimenu>+ Launch stack</guimenu></menuchoice>.
</para>

<para>
You will be prompted to select a template.
</para>

<mediaobject>
<imageobject>
  <imagedata condition="pdf" fileref="./images/launchstack.png" width="450"/>
  <imagedata condition="web" fileref="./images/launchstack.png" />
</imageobject>
</mediaobject>


<para>
You will then be asked to fill in the parameters of the template and launch 
the stack.
</para>


<mediaobject>
<imageobject>
  <imagedata condition="pdf" fileref="./images/launch_param.png" width="450"/>
  <imagedata condition="web" fileref="./images/launch_param.png" />
</imageobject>
</mediaobject>


<para>
Then you can follow the status of your stack on the dashboard.
</para>

</section>

</chapter>
